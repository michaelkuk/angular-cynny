// Generated by CoffeeScript 1.10.0
(function() {
  var factory;

  factory = function($http, $q, MD5, CynnyChunkUploader, CynnyParityUploader) {
    var CynnyUploader;
    return CynnyUploader = (function() {
      CynnyUploader.prototype._storageUrl = null;

      CynnyUploader.prototype._bucket = null;

      CynnyUploader.prototype._object = null;

      CynnyUploader.prototype._signedToken = null;

      CynnyUploader.prototype._file = null;

      CynnyUploader.prototype._fileSize = null;

      CynnyUploader.prototype._fileMd5 = null;

      CynnyUploader.prototype._uploadToken = null;

      CynnyUploader.prototype._totalChunks = null;

      CynnyUploader.prototype._partityChunks = null;

      CynnyUploader.prototype._parityStep = null;

      CynnyUploader.prototype._chunkSize = null;

      CynnyUploader.prototype._uploadQueue = null;

      CynnyUploader.prototype._uploadedChunks = null;

      CynnyUploader.prototype._lastProgress = null;

      function CynnyUploader(params, concurrency) {
        var required;
        if (params == null) {
          params = {};
        }
        if (concurrency == null) {
          concurrency = 1;
        }
        required = ['signedToken', 'storageUrl', 'bucket', 'object', 'file'];
        this._processParams(params, required);
        this._fileSize = this._file.size;
      }

      CynnyUploader.prototype._processParams = function(params, required) {
        var i, len, p, pkeys, results;
        pkeys = Object.keys(params);
        results = [];
        for (i = 0, len = required.length; i < len; i++) {
          p = required[i];
          if (pkeys.indexOf(p) === -1) {
            throw new Error("params are missing required property '" + p + "'");
          }
          results.push(this["_" + p] = params[p]);
        }
        return results;
      };

      CynnyUploader.prototype.onPreparetionProgress = function(prog) {};

      CynnyUploader.prototype.onUploadProgress = function(prog) {};

      CynnyUploader.prototype.upload = function() {
        this._uploadQueue = [];
        this._uploadedChunks = 0;
        return this._getFileHash().then(this._createFile.bind(this)).then(this._createUploadQueue.bind(this)).then(this._processUploadQueue.bind(this)).then(this._finalizeFile.bind(this));
      };

      CynnyUploader.prototype._progress = function() {
        var currentProgress;
        currentProgress = Math.floor(this._uploadedChunks / (this._totalChunks + this._partityChunks) * 100);
        if (typeof this.onUploadProgress === 'function' && currentProgress !== this._lastProgress) {
          this.onUploadProgress(currentProgress);
        }
        this._lastProgress = currentProgress;
      };

      CynnyUploader.prototype._getFileHash = function() {
        return $q((function(_this) {
          return function(resolve, reject) {
            var hash;
            hash = new MD5();
            hash.onProgress = function(progress) {
              return _this.onPreparetionProgress(progress);
            };
            hash.hashFile(_this._file).then(function(checksum) {
              _this._fileMd5 = checksum;
              return resolve();
            })["catch"](reject);
          };
        })(this));
      };

      CynnyUploader.prototype._createFile = function() {
        var data, httpOptions;
        data = {
          md5Encode: this._fileMd5,
          name: this._object,
          size: this._fileSize
        };
        httpOptions = {
          headers: {
            'Content-Type': 'application/json',
            'x-cyn-signedtoken': this._signedToken
          }
        };
        return $http.post(this._storageUrl + "/b/" + this._bucket + "/o", data, httpOptions).then((function(_this) {
          return function(response) {
            _this._uploadToken = response.data.data.uploadToken;
            _this._totalChunks = response.data.data.emptyChunks;
            _this._partityChunks = response.data.data.emptyChunksParity;
            _this._parityStep = response.data.data.object.parityStep;
            _this._chunkSize = response.data.data.object.chunkSize;
            return true;
          };
        })(this));
      };

      CynnyUploader.prototype._createUploadQueue = function() {
        this._createChunks();
        this._createParity();
        return true;
      };

      CynnyUploader.prototype._createChunks = function() {
        var c, chunkParams;
        c = 0;
        chunkParams = {
          storageUrl: this._storageUrl,
          file: this._file,
          fileSize: this._fileSize,
          uploadToken: this._uploadToken,
          signedToken: this._signedToken,
          bucket: this._bucket,
          object: this._object,
          chunkSize: this._chunkSize
        };
        while (c < this._totalChunks) {
          this._uploadQueue.push(new CynnyChunkUploader(chunkParams, c));
          c += 1;
        }
        return true;
      };

      CynnyUploader.prototype._createParity = function() {
        var chunkParams, p;
        p = 0;
        chunkParams = {
          storageUrl: this._storageUrl,
          file: this._file,
          fileSize: this._fileSize,
          uploadToken: this._uploadToken,
          signedToken: this._signedToken,
          chunkSize: this._chunkSize,
          bucket: this._bucket,
          object: this._object,
          parityStep: this._parityStep,
          totalChunks: this._totalChunks
        };
        while (p < this._partityChunks) {
          this._uploadQueue.push(new CynnyParityUploader(chunkParams, p));
          p += 1;
        }
        return true;
      };

      CynnyUploader.prototype._processUploadQueue = function() {
        return new Promise((function(_this) {
          return function(resolve, reject) {
            var callback, criteria, iterator;
            criteria = function() {
              return _this._uploadQueue.length > 0;
            };
            iterator = function(cb) {
              var prom, upItem;
              upItem = _this._uploadQueue.shift();
              prom = upItem.upload();
              prom.then(function() {
                upItem = null;
                prom = null;
                _this._uploadedChunks += 1;
                _this._progress();
                return cb();
              });
              return prom["catch"](function(err) {
                if (err == null) {
                  err = new Error("Chunk " + upItem._chunkIndex + " failed to upload");
                }
                upItem = null;
                prom = null;
                return cb(err);
              });
            };
            callback = function(err) {
              if (err) {
                reject(err);
              }
              return resolve();
            };
            async.whilst(criteria, iterator, callback);
          };
        })(this));
      };

      CynnyUploader.prototype._finalizeFile = function() {
        var httpOptions;
        httpOptions = {
          headers: {
            'Content-Type': 'application/json',
            'x-cyn-signedtoken': this._signedToken,
            'x-cyn-uploadtoken': this._uploadToken
          }
        };
        return $http.patch(this._storageUrl + "/b/" + this._bucket + "/o/" + this._object, {
          status: 1
        }, httpOptions);
      };

      return CynnyUploader;

    })();
  };

  angular.module('cynny').factory('CynnyUploader', ['$http', '$q', 'MD5', 'CynnyChunkUploader', 'CynnyParityUploader', factory]);

}).call(this);
