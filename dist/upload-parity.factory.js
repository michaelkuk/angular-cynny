// Generated by CoffeeScript 1.10.0
(function() {
  var factory;

  factory = function($http, $q) {
    var CynnyParityUpload;
    return CynnyParityUpload = (function() {
      CynnyParityUpload.prototype._file = null;

      CynnyParityUpload.prototype._fileSize = null;

      CynnyParityUpload.prototype._signedToken = null;

      CynnyParityUpload.prototype._uploadToken = null;

      CynnyParityUpload.prototype._storageUrl = null;

      CynnyParityUpload.prototype._bucket = null;

      CynnyParityUpload.prototype._object = null;

      CynnyParityUpload.prototype._chunkSize = null;

      CynnyParityUpload.prototype._parityStep = null;

      CynnyParityUpload.prototype._totalChunks = null;

      CynnyParityUpload.prototype._chunkIndex = null;

      CynnyParityUpload.prototype._xorIndex = null;

      CynnyParityUpload.prototype._xorLength = null;

      CynnyParityUpload.prototype._chunkArrayBuffer = null;

      CynnyParityUpload.prototype._tempArrayBuffer = null;

      CynnyParityUpload.prototype._chunkCrc = null;

      function CynnyParityUpload(params, index) {
        var required;
        if (params == null) {
          params = {};
        }
        required = ['signedToken', 'uploadToken', 'storageUrl', 'bucket', 'object', 'totalChunks', 'chunkSize', 'parityStep', 'file', 'fileSize'];
        this._processParams(params, required);
        this._xorLength = Math.min((index + 1) * this._parityStep, this._totalChunks - 1);
        this._xorIndex = index * params.parityStep;
      }

      CynnyParityUpload.prototype._processParams = function(params, required) {
        var j, len, p, pkeys, results;
        pkeys = Object.keys(params);
        results = [];
        for (j = 0, len = required.length; j < len; j++) {
          p = required[j];
          if (pkeys.indexOf(p) === -1) {
            throw new Error("params are missing required property '" + p + "'");
          }
          results.push(this["_" + p] = params[p]);
        }
        return results;
      };

      CynnyParityUpload.prototype.upload = function() {
        return this._calculateParity().then(this._uploadForm.bind(this)).then(this._destroy.bind(this));
      };

      CynnyParityUpload.prototype._destroy = function() {
        this._file = null;
        this._signedToken = null;
        this._uploadToken = null;
        this._storageUrl = null;
        this._bucket = null;
        this._object = null;
        this._chunkSize = null;
        this._parityStep = null;
        this._totalChunks = null;
        this._chunkIndex = null;
        this._xorIndex = null;
        this._xorLength = null;
        this._chunkArrayBuffer = null;
        this._tempArrayBuffer = null;
        this._chunkCrc = null;
        return true;
      };

      CynnyParityUpload.prototype._calculateParity = function() {
        return $q((function(_this) {
          return function(resolve, reject) {
            var callback, criteria, iterator;
            criteria = function() {
              return _this._xorIndex < _this._xorLength;
            };
            iterator = function(cb) {
              var end, start;
              start = _this._chunkSize * _this._xorIndex;
              end = Math.min(start + _this._chunkSize, _this._fileSize);
              if (start < _this._fileSize) {
                return _this._readFileChunk(start, end).then(_this._parityIteration.bind(_this)).then(function() {
                  _this._xorIndex += 1;
                  return cb();
                })["catch"](function(err) {
                  return cb(err);
                });
              } else {
                _this._xorIndex += 1;
                return cb();
              }
            };
            callback = function(err) {
              if (err) {
                return reject(err);
              } else {
                return resolve();
              }
            };
            async.whilst(criteria, iterator, callback);
          };
        })(this));
      };

      CynnyParityUpload.prototype._parityIteration = function() {
        return $q((function(_this) {
          return function(resolve, reject) {
            var arr, i;
            if (_this._chunkArrayBuffer === null || _this._totalChunks === 1) {
              _this._chunkArrayBuffer = new Uint8Array(_this._tempArrayBuffer);
              return resolve();
            } else {
              arr = new Uint8Array(_this._tempArrayBuffer);
              i = 0;
              while (i < arr.length) {
                _this._chunkArrayBuffer[i] ^= arr[i];
                i += 1;
              }
              arr = null;
              return resolve();
            }
          };
        })(this));
      };

      CynnyParityUpload.prototype._readFileChunk = function(start, end) {
        return $q((function(_this) {
          return function(resolve, reject) {
            var reader;
            reader = new FileReader();
            reader.onerror = function(event) {
              return reject(event);
            };
            reader.onloadend = function(event) {
              if (event.target.readyState !== FileReader.DONE) {
                return false;
              }
              _this._tempArrayBuffer = event.target.result;
              return resolve();
            };
            reader.readAsArrayBuffer(_this._file.slice(start, end));
          };
        })(this));
      };

      CynnyParityUpload.prototype._uploadForm = function() {
        return $q((function(_this) {
          return function(resolve, reject) {
            var fd, httpOptions, url;
            httpOptions = {
              transformRequest: angular.identity,
              headers: {
                'Content-Type': void 0,
                'x-cyn-signedtoken': _this._signedToken,
                'x-cyn-uploadtoken': _this._uploadToken
              }
            };
            fd = new FormData();
            fd.append('crc', _this._crcAdler32());
            fd.append('chunk', new Blob([_this._chunkArrayBuffer], {
              type: "application/octet-stream",
              size: _this._chunkArrayBuffer.length
            }));
            url = _this._storageUrl + "/b/" + _this._bucket + "/o/" + _this._object + "/cnk/" + _this._chunkIndex + "?Parity=1";
            $http.put(url, fd, httpOptions).then(function() {
              return resolve();
            })["catch"](function(err) {
              var ref;
              if ((200 <= (ref = Number(err.status)) && ref < 400)) {
                return resolve();
              } else {
                return reject(err);
              }
            });
          };
        })(this));
      };

      CynnyParityUpload.prototype._crcAdler32 = function() {
        var a, b, j, len, n, ref;
        a = 0;
        b = 0;
        ref = this._chunkArrayBuffer;
        for (j = 0, len = ref.length; j < len; j++) {
          n = ref[j];
          a = (a + Number(n)) % 65521;
          b = (b + a) % 65521;
        }
        return ((b << 16) | a) >>> 0;
      };

      return CynnyParityUpload;

    })();
  };

  angular.module('cynny').factory('CynnyParityUploader', ['$http', '$q', factory]);

}).call(this);
